<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Morten&#39;s Blog</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://limaomei1986.github.io/"/>
  <updated>2017-11-02T14:36:58.613Z</updated>
  <id>https://limaomei1986.github.io/</id>
  
  <author>
    <name>Morten</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP/IP协议</title>
    <link href="https://limaomei1986.github.io/2017/11/02/TCP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://limaomei1986.github.io/2017/11/02/TCP协议/</id>
    <published>2017-11-02T05:29:05.000Z</published>
    <updated>2017-11-02T14:36:58.613Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP建立连接的三次握手过程，以及关闭连接的四次挥手过程&quot;&gt;&lt;a href=&quot;#TCP建立连接的三次握手过程，以及关闭连接的四次挥手过程&quot; class=&quot;headerlink&quot; title=&quot;TCP建立连接的三次握手过程，以及关闭连接的四次挥手过程&quot;&gt;&lt;/a&gt;TCP建立连接的三次握手过程，以及关闭连接的四次挥手过程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;建立连接协议（三次握手）&lt;ol&gt;
&lt;li&gt;客户端发送一个带SYN标志的TCP报文到服务器，这是三次握手过程中的报文1。&lt;/li&gt;
&lt;li&gt;服务器端回应客户端的，这是三次握手中的第2个报文，这个报文同时带ACK标志和SYN标志，因此它表示对刚才客户端SYN报文的回应，同时又标志SYN给客户端，询问客户端是否准备好进行数据通讯&lt;/li&gt;
&lt;li&gt;客户必须再次回应服务段一个ACK报文，这是第3段报文。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;关闭连接协议（四次挥手）：由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭&lt;ol&gt;
&lt;li&gt;TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送（报文段4）&lt;/li&gt;
&lt;li&gt;服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1（报文段5）&lt;/li&gt;
&lt;li&gt;服务器关闭客户端的连接，发送一个FIN给客户端（报文段6）&lt;/li&gt;
&lt;li&gt;客户段发回ACK报文确认，并将确认序号设置为收到序号加1（报文段7）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="https://limaomei1986.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="TCP/IP" scheme="https://limaomei1986.github.io/tags/TCP-IP/"/>
    
      <category term="网络" scheme="https://limaomei1986.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java并发 - CountDownLatch示例</title>
    <link href="https://limaomei1986.github.io/2017/09/27/Java%E5%B9%B6%E5%8F%91-CountDownLatch%E7%A4%BA%E4%BE%8B/"/>
    <id>https://limaomei1986.github.io/2017/09/27/Java并发-CountDownLatch示例/</id>
    <published>2017-09-27T07:40:30.000Z</published>
    <updated>2017-09-28T02:13:48.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CountDownLatch&lt;/strong&gt;是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。在Java并发中，countdownlatch的概念是一个常见的面试题，所以一定要确保你很好的理解了它。在这篇文章中，将会涉及到在Java并发编程中跟CountDownLatch相关的以下几点：&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CountDownLatch是什么？&lt;/li&gt;
&lt;li&gt;CountDownLatch如何工作？&lt;/li&gt;
&lt;li&gt;在实时系统中的应用场景&lt;/li&gt;
&lt;li&gt;应用范例&lt;/li&gt;
&lt;li&gt;常见的面试题&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;CountDownLatch是什么&quot;&gt;&lt;a href=&quot;#CountDownLatch是什么&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch是什么&quot;&gt;&lt;/a&gt;CountDownLatch是什么&lt;/h2&gt;&lt;p&gt;CountDownLatch是在Java1.5被引入的，跟它一起被引入的并发工具类还有CyclicBarrier、Semaphore、ConcurrentHashMap和BlockingQueue，它们都存在于java.util.concurrent包下。CountDownLatch这个类能够使一个线程等待其他线程完成各自的工作后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。&lt;br&gt;CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，&amp;gt;然后在闭锁上等待的线程就可以恢复执行任务。&lt;br&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://limaomei1986.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发之CountDownLatch、CyclicBarrier和Semaphore</title>
    <link href="https://limaomei1986.github.io/2017/09/27/Java%E5%B9%B6%E5%8F%91%E4%B9%8BCountDownLatch%E3%80%81CyclicBarrier%E5%92%8CSemaphore/"/>
    <id>https://limaomei1986.github.io/2017/09/27/Java并发之CountDownLatch、CyclicBarrier和Semaphore/</id>
    <published>2017-09-27T05:29:05.000Z</published>
    <updated>2017-09-28T02:52:03.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;CountDownLatch 是能使一组线程等另一组线程都跑完了再继续跑；CyclicBarrier 能够使一组线程在一个时间点上达到同步，可以是一起开始执行全部任务或者一部分任务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这次说一下 JUC 中的同步器三个主要的成员：CountDownLatch、CyclicBarrier 和 Semaphore（不知道有没有初学者觉得这三个的名字不太好记）。这三个是 JUC 中较为常用的同步器，通过它们可以方便地实现很多线程之间协作的功能。（下面的代码出自 JDK 文档）&lt;/p&gt;
&lt;h2 id=&quot;CountDownLatch&quot;&gt;&lt;a href=&quot;#CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch&quot;&gt;&lt;/a&gt;CountDownLatch&lt;/h2&gt;&lt;p&gt;直译过来就是倒计数(CountDown)门闩(Latch)。倒计数不用说，门闩的意思顾名思义就是阻止前进。在这里就是指 CountDownLatch.await() 方法在倒计数为0之前会阻塞当前线程。&lt;/p&gt;
&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;p&gt;CountDownLatch 的作用和 Thread.join() 方法类似，可用于一组线程和另外一组线程的协作。例如，主线程在做一项工作之前需要一系列的准备工作，只有这些准备工作都完成，主线程才能继续它的工作。这些准备工作彼此独立，所以可以并发执行以提高速度。在这个场景下就可以使用 CountDownLatch 协调线程之间的调度了。在直接创建线程的年代（Java 5.0 之前），我们可以使用 Thread.join()。在 JUC 出现后，因为线程池中的线程不能直接被引用，所以就必须使用 CountDownLatch 了。&lt;br&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://limaomei1986.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>类的复用</title>
    <link href="https://limaomei1986.github.io/2017/09/27/%E7%B1%BB%E7%9A%84%E5%A4%8D%E7%94%A8/"/>
    <id>https://limaomei1986.github.io/2017/09/27/类的复用/</id>
    <published>2017-09-27T05:29:05.000Z</published>
    <updated>2017-11-02T14:37:40.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;代码的复用是编程过程中要实现的重要功能，它可以让我们不必重头开始编写代码。在Java中可以通过&lt;code&gt;组合&lt;/code&gt;和&lt;code&gt;继承&lt;/code&gt;来实现类的复用&lt;/p&gt;
&lt;h1 id=&quot;组合&quot;&gt;&lt;a href=&quot;#组合&quot; class=&quot;headerlink&quot; title=&quot;组合&quot;&gt;&lt;/a&gt;组合&lt;/h1&gt;&lt;p&gt;要使用组合值需要将对象引用置于新类中即可。这里涉及到组合对象的初始化问题，我们可以在声明对象的同时进行初始化，也可以在构造函数进行初始化、还可以在实例块中进行初始化，或者在对象正要使用之前初始化（惰性初始化）。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; reusing;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; net.mindview.util.Print.*;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Soap&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Soap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		print(&lt;span class=&quot;string&quot;&gt;&quot;Soap()&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s = &lt;span class=&quot;string&quot;&gt;&quot;Constructed&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bath&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String s1 = &lt;span class=&quot;string&quot;&gt;&quot;Happy&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 1.在定义处初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			s2 = &lt;span class=&quot;string&quot;&gt;&quot;Happy&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 1.在定义处初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			s3, s4;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Soap castille;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; toy;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 2.构造函数中初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		print(&lt;span class=&quot;string&quot;&gt;&quot;Inside Bath()&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		s3 = &lt;span class=&quot;string&quot;&gt;&quot;Toy&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		toy = &lt;span class=&quot;number&quot;&gt;3.14f&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		castille = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Soap();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 3.实例块中初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		i = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 4.惰性初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s4 == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			s4 = &lt;span class=&quot;string&quot;&gt;&quot;Job&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Bath [s1=&quot;&lt;/span&gt; + s1 + &lt;span class=&quot;string&quot;&gt;&quot;, s2=&quot;&lt;/span&gt; + s2 + &lt;span class=&quot;string&quot;&gt;&quot;, s3=&quot;&lt;/span&gt; + s3 + &lt;span class=&quot;string&quot;&gt;&quot;, s4=&quot;&lt;/span&gt; + s4 + &lt;span class=&quot;string&quot;&gt;&quot;, castille=&quot;&lt;/span&gt; + castille + &lt;span class=&quot;string&quot;&gt;&quot;, i=&quot;&lt;/span&gt; + i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				+ &lt;span class=&quot;string&quot;&gt;&quot;, toy=&quot;&lt;/span&gt; + toy + &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Bath bath = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bath();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		print(bath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="面相对对象" scheme="https://limaomei1986.github.io/tags/%E9%9D%A2%E7%9B%B8%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>从MVC到前后端分离</title>
    <link href="https://limaomei1986.github.io/2016/10/26/%E4%BB%8EMVC%E5%88%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>https://limaomei1986.github.io/2016/10/26/从MVC到前后端分离/</id>
    <published>2016-10-26T12:29:05.000Z</published>
    <updated>2017-10-17T03:16:43.307Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;：MVC模式早在上个世纪70年代就诞生了，直到今天它依然存在，可见生命力相当之强。MVC模式最早用于Smalltalk语言中，最后在其它许多开发语言中都得到了很好的应用，例如，Java中的Struts、Spring MVC等框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解MVC&quot;&gt;&lt;a href=&quot;#理解MVC&quot; class=&quot;headerlink&quot; title=&quot;理解MVC&quot;&gt;&lt;/a&gt;理解MVC&lt;/h2&gt;&lt;p&gt;MVC是一种经典的设计模式，全名为Model-View-Controller，即模型-视图-控制器。&lt;/p&gt;
&lt;p&gt;其中，模型是用于封装数据的载体，例如，在Java中一般通过一个简单的POJO（Plain Ordinary Java Object）来表示，其本质是一个普通的Java Bean，包含一系列的成员变量及其getter/setter方法。对于视图而言，它更加偏重于展现，也就是说，视图决定了界面到底长什么样子，在Java中可通过JSP来充当视图，或者通过纯HTML的方式进行展现，而后者才是目前的主流。模型和视图需要通过控制器来进行粘合，例如，用户发送一个HTTP请求，此时该请求首先会进入控制器，然后控制器去获取数据并将其封装为模型，最后将模型传递到视图中进行展现。&lt;/p&gt;
&lt;p&gt;综上所述，MVC的交互过程如图1所示：&lt;br&gt;[&lt;img src=&quot;http://img.ptcms.csdn.net/article/201510/21/56275703bfc42_middle.jpg&quot; alt=&quot;&quot;&gt;]&lt;/p&gt;
&lt;h2 id=&quot;MVC模式的优点与不足&quot;&gt;&lt;a href=&quot;#MVC模式的优点与不足&quot; class=&quot;headerlink&quot; title=&quot;MVC模式的优点与不足&quot;&gt;&lt;/a&gt;MVC模式的优点与不足&lt;/h2&gt;&lt;p&gt;MVC模式早在上个世纪70年代就诞生了，直到今天它依然存在，可见生命力相当之强。MVC模式最早用于Smalltalk语言中，最后在其它许多开发语言中都得到了很好的应用，例如，Java中的Struts、Spring MVC等框架。正是因为这些MVC框架的出现，才让MVC模式真正落地，让开发更加高效，让代码耦合度尽量减小，让应用程序各部分的职责更加清晰。&lt;/p&gt;
    
    </summary>
    
      <category term="架构之路" scheme="https://limaomei1986.github.io/categories/%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Restfull" scheme="https://limaomei1986.github.io/tags/Restfull/"/>
    
      <category term="MVC" scheme="https://limaomei1986.github.io/tags/MVC/"/>
    
      <category term="软件架构" scheme="https://limaomei1986.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何在Java中创建一个类？</title>
    <link href="https://limaomei1986.github.io/2016/02/27/2%20How%20to%20create%20a%20class%20in%20Java/"/>
    <id>https://limaomei1986.github.io/2016/02/27/2 How to create a class in Java/</id>
    <published>2016-02-27T13:02:05.000Z</published>
    <updated>2017-10-16T05:35:04.734Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;类是面向对象范式编程中的基本单元。本文向你展示了在编写Java类时，将需要了解的一些基本但重要的内容。&lt;br&gt;类是创建对象的模板，Java中的类可能包含下面五个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字段&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;li&gt;静态块&lt;/li&gt;
&lt;li&gt;实例块&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字段和方法也称为类的成员，剩下的3个组件用于初始化类，即使用类模板创建对象。构造函数用于创建类的对象，类必须至少有一个构造函数（如果没有明确声明，JVM会注册一个默认的构造函数）。静态块和实例块用于初始化类的字段。类可以拥有零个或多个静态块或实例块。&lt;/p&gt;
&lt;h2 id=&quot;如何声明一个类&quot;&gt;&lt;a href=&quot;#如何声明一个类&quot; class=&quot;headerlink&quot; title=&quot;如何声明一个类&quot;&gt;&lt;/a&gt;如何声明一个类&lt;/h2&gt;&lt;p&gt;在Java中声明一个类的语法如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&amp;lt;modifiers&amp;gt;&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Body of the class goes here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/tags/Core-Java/"/>
    
  </entry>
  
  <entry>
    <title>什么是Java编程语言？</title>
    <link href="https://limaomei1986.github.io/2016/02/26/1%20What%20is%20Java%20programming%20language/"/>
    <id>https://limaomei1986.github.io/2016/02/26/1 What is Java programming language/</id>
    <published>2016-02-26T12:29:05.000Z</published>
    <updated>2017-10-13T07:30:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Java是一种通用的计算机编程语言，它是并发的，基于类的，面向对象的，并且被专门设计为具有尽可能少的实现依赖性。它旨在让应用程序开发人员”&lt;strong&gt;write once, run anywhere&lt;/strong&gt;“（&lt;strong&gt;WORA&lt;/strong&gt;），这意味着编译的Java代码可以在支持Java的所有平台上运行，而无需重新编译。例如，您可以在UNIX上编写和编译Java程序，并在Microsoft Windows，Macintosh或UNIX机器上运行它，而不对源代码进行任何修改。&lt;strong&gt;WORA是通过将Java程序编译成一个称为字节码的中间语言来实现&lt;/strong&gt;。字节码与平台无关，可以在运行Java虚拟机（JVM）的每个平台上运行字节码。&lt;/p&gt;
&lt;p&gt;Java最初由Sun Microsystems（后被Oracle Corporation收购）的James Gosling开发，并于1995年发布，作为Sun Microsystems Java平台的核心组件。该语言源自C和C ++的大部分语法，但是它的底层操作比其中任何一个都要少。&lt;/p&gt;
&lt;p&gt;甲骨文公司是2010年1月27日收购Sun Microsystems之后正式实施Java SE平台的所有者。这个实现是基于Sun的原始实现。 Oracle实现可用于Microsoft Windows，Mac OS X，Linux和Solaris。&lt;/p&gt;
&lt;p&gt;Oracle实现被打包成两个不同的发行版：&lt;strong&gt;Java运行时环境（JRE），其中包含运行Java程序所需的Java SE平台的部分内容，并且适用于最终用户以及Java Development Kit（JDK） 适用于软件开发人员，并且包括开发工具，如Java编译器，Javadoc，Jar和调试器。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/tags/Core-Java/"/>
    
  </entry>
  
</feed>
