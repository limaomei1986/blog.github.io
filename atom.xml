<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Morten&#39;s Blog</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://limaomei1986.github.io/"/>
  <updated>2017-09-28T02:13:48.000Z</updated>
  <id>https://limaomei1986.github.io/</id>
  
  <author>
    <name>Morten</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发 - CountDownLatch示例</title>
    <link href="https://limaomei1986.github.io/2017/09/27/Java%E5%B9%B6%E5%8F%91-CountDownLatch%E7%A4%BA%E4%BE%8B/"/>
    <id>https://limaomei1986.github.io/2017/09/27/Java并发-CountDownLatch示例/</id>
    <published>2017-09-27T07:40:30.000Z</published>
    <updated>2017-09-28T02:13:48.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CountDownLatch&lt;/strong&gt;是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。在Java并发中，countdownlatch的概念是一个常见的面试题，所以一定要确保你很好的理解了它。在这篇文章中，将会涉及到在Java并发编程中跟CountDownLatch相关的以下几点：&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CountDownLatch是什么？&lt;/li&gt;
&lt;li&gt;CountDownLatch如何工作？&lt;/li&gt;
&lt;li&gt;在实时系统中的应用场景&lt;/li&gt;
&lt;li&gt;应用范例&lt;/li&gt;
&lt;li&gt;常见的面试题&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;CountDownLatch是什么&quot;&gt;&lt;a href=&quot;#CountDownLatch是什么&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch是什么&quot;&gt;&lt;/a&gt;CountDownLatch是什么&lt;/h2&gt;&lt;p&gt;CountDownLatch是在Java1.5被引入的，跟它一起被引入的并发工具类还有CyclicBarrier、Semaphore、ConcurrentHashMap和BlockingQueue，它们都存在于java.util.concurrent包下。CountDownLatch这个类能够使一个线程等待其他线程完成各自的工作后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。&lt;br&gt;CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，&amp;gt;然后在闭锁上等待的线程就可以恢复执行任务。&lt;br&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://limaomei1986.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发之CountDownLatch、CyclicBarrier和Semaphore</title>
    <link href="https://limaomei1986.github.io/2017/09/27/Java%E5%B9%B6%E5%8F%91%E4%B9%8BCountDownLatch%E3%80%81CyclicBarrier%E5%92%8CSemaphore/"/>
    <id>https://limaomei1986.github.io/2017/09/27/Java并发之CountDownLatch、CyclicBarrier和Semaphore/</id>
    <published>2017-09-27T05:29:05.000Z</published>
    <updated>2017-09-28T02:52:03.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;CountDownLatch 是能使一组线程等另一组线程都跑完了再继续跑；CyclicBarrier 能够使一组线程在一个时间点上达到同步，可以是一起开始执行全部任务或者一部分任务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这次说一下 JUC 中的同步器三个主要的成员：CountDownLatch、CyclicBarrier 和 Semaphore（不知道有没有初学者觉得这三个的名字不太好记）。这三个是 JUC 中较为常用的同步器，通过它们可以方便地实现很多线程之间协作的功能。（下面的代码出自 JDK 文档）&lt;/p&gt;
&lt;h2 id=&quot;CountDownLatch&quot;&gt;&lt;a href=&quot;#CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch&quot;&gt;&lt;/a&gt;CountDownLatch&lt;/h2&gt;&lt;p&gt;直译过来就是倒计数(CountDown)门闩(Latch)。倒计数不用说，门闩的意思顾名思义就是阻止前进。在这里就是指 CountDownLatch.await() 方法在倒计数为0之前会阻塞当前线程。&lt;/p&gt;
&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;p&gt;CountDownLatch 的作用和 Thread.join() 方法类似，可用于一组线程和另外一组线程的协作。例如，主线程在做一项工作之前需要一系列的准备工作，只有这些准备工作都完成，主线程才能继续它的工作。这些准备工作彼此独立，所以可以并发执行以提高速度。在这个场景下就可以使用 CountDownLatch 协调线程之间的调度了。在直接创建线程的年代（Java 5.0 之前），我们可以使用 Thread.join()。在 JUC 出现后，因为线程池中的线程不能直接被引用，所以就必须使用 CountDownLatch 了。&lt;br&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://limaomei1986.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何在Java中创建一个类？</title>
    <link href="https://limaomei1986.github.io/2016/02/27/2%20How%20to%20create%20a%20class%20in%20Java/"/>
    <id>https://limaomei1986.github.io/2016/02/27/2 How to create a class in Java/</id>
    <published>2016-02-27T13:02:05.000Z</published>
    <updated>2017-10-16T05:35:04.734Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;类是面向对象范式编程中的基本单元。本文向你展示了在编写Java类时，将需要了解的一些基本但重要的内容。&lt;br&gt;类是创建对象的模板，Java中的类可能包含下面五个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字段&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;li&gt;静态块&lt;/li&gt;
&lt;li&gt;实例块&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字段和方法也称为类的成员，剩下的3个组件用于初始化类，即使用类模板创建对象。构造函数用于创建类的对象，类必须至少有一个构造函数（如果没有明确声明，JVM会注册一个默认的构造函数）。静态块和实例块用于初始化类的字段。类可以拥有零个或多个静态块或实例块。&lt;/p&gt;
&lt;h2 id=&quot;如何声明一个类&quot;&gt;&lt;a href=&quot;#如何声明一个类&quot; class=&quot;headerlink&quot; title=&quot;如何声明一个类&quot;&gt;&lt;/a&gt;如何声明一个类&lt;/h2&gt;&lt;p&gt;在Java中声明一个类的语法如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&amp;lt;modifiers&amp;gt;&amp;gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Body of the class goes here&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/tags/Core-Java/"/>
    
  </entry>
  
  <entry>
    <title>什么是Java编程语言？</title>
    <link href="https://limaomei1986.github.io/2016/02/26/1%20What%20is%20Java%20programming%20language/"/>
    <id>https://limaomei1986.github.io/2016/02/26/1 What is Java programming language/</id>
    <published>2016-02-26T12:29:05.000Z</published>
    <updated>2017-10-13T07:30:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Java是一种通用的计算机编程语言，它是并发的，基于类的，面向对象的，并且被专门设计为具有尽可能少的实现依赖性。它旨在让应用程序开发人员”&lt;strong&gt;write once, run anywhere&lt;/strong&gt;“（&lt;strong&gt;WORA&lt;/strong&gt;），这意味着编译的Java代码可以在支持Java的所有平台上运行，而无需重新编译。例如，您可以在UNIX上编写和编译Java程序，并在Microsoft Windows，Macintosh或UNIX机器上运行它，而不对源代码进行任何修改。&lt;strong&gt;WORA是通过将Java程序编译成一个称为字节码的中间语言来实现&lt;/strong&gt;。字节码与平台无关，可以在运行Java虚拟机（JVM）的每个平台上运行字节码。&lt;/p&gt;
&lt;p&gt;Java最初由Sun Microsystems（后被Oracle Corporation收购）的James Gosling开发，并于1995年发布，作为Sun Microsystems Java平台的核心组件。该语言源自C和C ++的大部分语法，但是它的底层操作比其中任何一个都要少。&lt;/p&gt;
&lt;p&gt;甲骨文公司是2010年1月27日收购Sun Microsystems之后正式实施Java SE平台的所有者。这个实现是基于Sun的原始实现。 Oracle实现可用于Microsoft Windows，Mac OS X，Linux和Solaris。&lt;/p&gt;
&lt;p&gt;Oracle实现被打包成两个不同的发行版：&lt;strong&gt;Java运行时环境（JRE），其中包含运行Java程序所需的Java SE平台的部分内容，并且适用于最终用户以及Java Development Kit（JDK） 适用于软件开发人员，并且包括开发工具，如Java编译器，Javadoc，Jar和调试器。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/categories/Core-Java/"/>
    
    
      <category term="Java" scheme="https://limaomei1986.github.io/tags/Java/"/>
    
      <category term="Core Java" scheme="https://limaomei1986.github.io/tags/Core-Java/"/>
    
  </entry>
  
</feed>
